<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--
        1、配置jsp的视图解析器
    -->
    <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
        <property name="order" value="1"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView"/>
    </bean>

    <!--
        1、配置在springMvc容器中只扫描@Controler注解标注的类
    -->
    <context:component-scan base-package="com.loong.modules" use-default-filters="false">
        <!--
            1、use-default-filters：不使用默认的过滤器。这里必须配置为false
            2、include-filter:根据注解类型进行过滤
        -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <mvc:annotation-driven>
        <!--
            1、配置json 与heepMessage转换器（这里不配也行，只要含jackson的三个jar包使用@ResponseBody也能返回json格式）
            2、这里可以对返回的json格式进行部分自定义配置
        -->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes" value="application/json"/>
                <property name="defaultCharset" value="UTF-8"/>
                <property name="prettyPrint" value="true"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <mvc:default-servlet-handler/>
    <mvc:resources mapping="/static/**" location="/static/"/>

    <!--##############################添加thymeleaf作为前端解析器################################-->
    <!--    <bean id="resourceBundleMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
             <property name="basename" value="message"/>
        </bean>
        <bean id="springResourceTemplateResolver" class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
            <property name="prefix" value="/WEB-INF/templates/"/>
            <property name="suffix" value=".html"/>
            <property name="cacheable" value="true"/>
        </bean>

        <bean id="springTemplateEngine" class="org.thymeleaf.spring5.SpringTemplateEngine">
            <property name="templateResolver" ref="springResourceTemplateResolver"/>
            <property name="enableSpringELCompiler" value="true"/>
        </bean>

        <bean id="resolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
            <property name="order" value="1"/>
            <property name="templateEngine" ref="springTemplateEngine"/>
        </bean>-->



    <!--##########################################7、开启shiro在项目中的注解功能(需要配置在springmvc文件中才能生效)#########################################-->
 <!--   <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"
        可以注释在 ShiroAnnotationProcessorConfiguration 中已经进行了依赖注入/>-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="defaultWebSecurityManager"/>
    </bean>
</beans>